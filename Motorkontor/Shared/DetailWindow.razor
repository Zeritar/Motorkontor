@inject ForeignKeyService ForeignKeyService

<div class="detailwindow">
    <h3>Detaljer for @Title</h3>
    <button class="newDetail" @onclick="newClick">Ny</button>
    <button class="saveDetail" @onclick="saveClick">Gem</button>
    <button class="deleteDetail" @onclick="deleteClick">Slet</button>
    <button class="closeDetail" @onclick="OnCloseClickCallback">Luk</button>
    @if (detailWindow)
    {
        <DetailWindow detailModel=@_detailModel Title="@_detailModel.GetFKName()" ForeignKey="true" OnCloseClickCallback="() => ToggleDetailWindow(null)" OnForeignKeySaveCallback="model => GotSaved(model)" />
    }
    @if (detailModel != null)
    {
        if (fieldValues == null)
        {
            fields = detailModel.GetFields();
            fieldValues = new Dictionary<string, string>();
            foreignModels = new Dictionary<string, IDetailModel>();
            @foreach (var field in detailModel.GetFields())
            {
                fieldValues.Add(field.Key.Name.ToLower(), field.Value);
                if (field.Key.Text.ToLower().Contains("fk"))
                {
                    foreignModels.Add(field.Key.Name, ForeignKeyService.GetDetailModelFromForeignKey(field.Key.Name, field.Value));
                }
            }
        }
        @foreach (var field in fields)
        {
<div class="detailInput">
    <p>@field.Key.Text</p>
    @if (!field.Key.Text.ToLower().Contains("id") && !field.Key.Text.ToLower().Contains("fk"))
    {
        <input id="@field.Value" value="@field.Value" @onchange="((ChangeEventArgs e) => onChange(e.Value.ToString(), field.Key.Name.ToLower()))">
    }
    else if (field.Key.Text.ToLower().Contains("fk"))
    {
        <select value="@field.Value" @onchange="e => SelectForeignKey(e, field.Key)">
            @foreach (var model in ForeignKeyService.GetDetailModelsFromForeignKeyType(field.Key.Name))
            {
                <option value="@model.GetId()">@model.ToString()</option>
            }
        </select>
        <button @onclick="() => ToggleDetailWindow(foreignModels[field.Key.Name])">
            Rediger @ForeignKeyService.GetDetailModelFromForeignKey(field.Key.Name, 0.ToString()).GetFKName()
        </button>
        <button @onclick="() => ToggleDetailWindow(ForeignKeyService.CreateDetailModelFromForeignKey(field.Key.Name))">
            Ny @ForeignKeyService.GetDetailModelFromForeignKey(field.Key.Name, 0.ToString()).GetFKName()
        </button>
    }
    else
    {
        <p class="detailID">@field.Value</p>
    }
</div>
        }
    }
</div>
@code {
    [Parameter]
    public EventCallback<MouseEventArgs> OnCloseClickCallback { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnSaveClickCallback { get; set; }
    [Parameter]
    public EventCallback<IDetailModel> OnForeignKeySaveCallback { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public bool ForeignKey { get; set; } = false;

    [Parameter]
    public IDetailModel detailModel { get; set; }

    private Dictionary<Field, string> fields;

    Dictionary<string, string> fieldValues;
    Dictionary<string, string> oldFieldValues;
    Dictionary<string, IDetailModel> foreignModels = new Dictionary<string, IDetailModel>();

    private bool detailWindow = false;
    private IDetailModel _detailModel;


    void saveClick()
    {
        foreach (var field in fieldValues)
        {
            if (field.Value == "")
            {
                if (oldFieldValues[field.Key] != "")
                {
                    fieldValues[field.Key] = oldFieldValues[field.Key];
                }
                else
                    return;
            }
        }
        Dictionary<Field, string> newFields = new Dictionary<Field, string>();
        int i = 0;
        foreach (var field in detailModel.GetFields())
        {
            newFields.Add(field.Key, fieldValues[field.Key.Name.ToLower()]);
            i++;
        }

        detailModel.UpdateFields(newFields);

        if (!ForeignKey)
            OnSaveClickCallback.InvokeAsync();
        else
            OnForeignKeySaveCallback.InvokeAsync(detailModel);
    }

    void SelectForeignKey(ChangeEventArgs e, Field field)
    {
        fields[field] = e.Value.ToString();
        fieldValues[field.Name.ToLower()] = e.Value.ToString();

        detailModel.UpdateFields(fields);

        if (Title == "Registrering" && field.Name.ToLower() == "vehicle")
        {
            fieldValues["firstregistrationdate"] = ForeignKeyService.GetDetailModelFromForeignKey("vehicle", e.Value.ToString())
                .GetFields().Where(e => e.Key.Name.ToLower() == "firstregistrationdate").FirstOrDefault().Value;
            fields[fields.Where(e => e.Key.Name.ToLower() == "firstregistrationdate").FirstOrDefault().Key] = fieldValues["firstregistrationdate"];
        }
    }

    void newClick()
    {
        detailModel = ForeignKeyService.CreateDetailModelFromForeignKey(detailModel.GetModelType());
        oldFieldValues = null;
        fieldValues = null;
    }

    void ToggleDetailWindow(IDetailModel model)
    {
        if (model != null)
        {
            if (!detailWindow)
                _detailModel = model;
            else
                _detailModel = null;
        }
        detailWindow = !detailWindow;

    }

    public async Task GotSaved(IDetailModel model)
    {
        await Task.Run(() =>
        {
            IDetailModel newModel;
            if (model.GetChanged())
            {
                _detailModel = model;
                if (_detailModel.GetId() == 0)
                {
                    newModel = ForeignKeyService.CreateDetailModelFromForeignKey(_detailModel.GetModelType(), ForeignKeyService.PostDetailModel(_detailModel).ToString());
                    newModel.UpdateFields(model.GetFields());

                    Dictionary<Field, string> newFields = new Dictionary<Field, string>();
                    newFields.Add(new Field(newModel.GetModelType(), newModel.GetModelType()), newModel.GetId().ToString());
                    detailModel.UpdateFields(newFields);
                    if (oldFieldValues == null)
                        oldFieldValues = fieldValues;
                    fieldValues = null;
                }
                else
                {
                    ForeignKeyService.UpdateDetailModel(_detailModel);
                }
            }
            if (_detailModel.GetDeleted())
            {
                ForeignKeyService.DropDetailModel(_detailModel);
            }
        });
        ToggleDetailWindow(null);
    }

    void deleteClick()
    {
        if (detailModel.GetId() != 0)
            detailModel.SetDeleted(true);

        OnSaveClickCallback.InvokeAsync();
    }

    void onChange(string newString, string key)
    {
        fieldValues[key.ToLower()] = newString;
        oldFieldValues = fieldValues;
    }

    string parseForeignKey(string fkField, string fkID)
    {
        return ForeignKeyService.GetFieldFromForeignKey(fkField, fkID);
    }
}
