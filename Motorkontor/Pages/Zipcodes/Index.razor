@page "/zipcodes"

@inject ZipCodeService ZipCodeService

<h1>Postnumre</h1>
<button @onclick="TryInsertZipCode">TryInsertZipCode()</button>
<button @onclick="TryUpdateZipCode">TryUpdateZipCode()</button>
<button @onclick="TryDeleteZipCode">TryDeleteZipCode()</button>
<button @onclick="() => ToggleDetailWindow(0)">Nyt Postnummer</button>
<div>
    @if (detailWindow)
            {
                <DetailWindow detailModel=@detailModel Title="Postnummer" OnClickCallback="() => ToggleDetailWindow(0)"/>
            }
    @if (zipCodes == null)
    {
        <p><em>Henter...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Postnummer ID</th>
                    <th>Postnummer</th>
                    <th>Bynavn</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var zipCode in zipCodes)
                {
                <tr class="clickable" @onclick="() => ToggleDetailWindow(zipCode.zipCodeId)">
                    <td>@zipCode.zipCodeId</td>
                    <td>@zipCode.zipCodeName</td>
                    <td>@zipCode.cityName</td>
                </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private ZipCode[] zipCodes;
    private bool detailWindow = false;
    private IDetailModel detailModel;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => { zipCodes = ZipCodeService.GetZipCodes(); });
    }

    void TryInsertZipCode()
    {
        ZipCode zipCode = new ZipCode()
        {
            zipCodeName = "2300",
            cityName = "København S"
        };
        if (ZipCodeService.PostZipCode(zipCode))
        {
            zipCodes = ZipCodeService.GetZipCodes();
        }
    }

    void TryUpdateZipCode()
    {
        if (zipCodes == null)
            return;

        ZipCode zipCode = zipCodes[1];

        zipCode.zipCodeName = "5000";
        zipCode.cityName = "Odense";
        if (ZipCodeService.UpdateZipCode(zipCode))
        {
            zipCodes = ZipCodeService.GetZipCodes();
        }
    }

    void TryDeleteZipCode()
    {
        if (zipCodes == null || zipCodes.Length < 4)
            return;

        ZipCode zipCode = zipCodes[3];

        if (ZipCodeService.DropZipCode(zipCode))
        {
            zipCodes = ZipCodeService.GetZipCodes();
        }
    }

    void ToggleDetailWindow(int id)
    {
        if (!detailWindow)
            if (id != 0)
                detailModel = zipCodes.Where(e => e.zipCodeId == id).FirstOrDefault();
            else
                detailModel = new ZipCode();
        else
            detailModel = null;
        detailWindow = !detailWindow;

    }
}
