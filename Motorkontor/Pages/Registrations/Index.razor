@page "/registrations"

@inject RegistrationService RegistrationService
@inject ForeignKeyService ForeignKeyService

<h1>Registreringer</h1>
<button @onclick="() => ToggleDetailWindow(0)">Ny Registrering</button>
<div>
    @if (detailWindow)
    {
        <DetailWindow detailModel=@detailModel Title="Køretøj" OnCloseClickCallback="() => ToggleDetailWindow(0)" OnSaveClickCallback="() => GotSaved()" />
    }
    @if (registrations == null)
    {
        <p><em>Henter...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    @foreach (var field in registrations[0].GetFields())
                    {
                        <th>@field.Key.Text</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var registration in registrations)
                {
                <tr class="clickable" @onclick="() => ToggleDetailWindow(registration.registrationId)">
                    @foreach (var field in registration.GetFields())
                    {
                        if (field.Key.Text.ToLower().Contains("fk"))
                        {
                            <td>@parseForeignKey(field.Key.Name, field.Value)</td>
                        }
                        else
                        {
                            <td>@field.Value</td>
                        }
                    }
                </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private Registration[] registrations;
    private bool detailWindow = false;
    private Registration detailModel;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => { registrations = RegistrationService.GetRegistrations(); });
    }

    void ToggleDetailWindow(int id)
    {
        if (!detailWindow)
            if (id != 0)
                detailModel = registrations.Where(e => e.registrationId == id).FirstOrDefault();
            else
            {
                detailModel = new Registration();
            }

        else
            detailModel = null;
        detailWindow = !detailWindow;

    }

    public async Task GotSaved()
    {
        await Task.Run(() =>
        {
            if (detailModel.registrationId == 0 && detailModel.hasChanged)
            {
                RegistrationService.PostRegistration(detailModel);
            }
            if (detailModel.deleted)
            {
                RegistrationService.DropRegistration(detailModel);
            }
            foreach (Registration registration in registrations)
            {
                if (registration.hasChanged)
                {
                    if (registration.registrationId == 0)
                    {
                        RegistrationService.PostRegistration(registration);
                    }
                    else
                    {
                        RegistrationService.UpdateRegistration(registration);
                    }

                }
            }
            registrations = RegistrationService.GetRegistrations();
        });
        ToggleDetailWindow(0);
    }

    string parseForeignKey(string fkField, string fkID)
    {
        return ForeignKeyService.GetFieldFromForeignKey(fkField, fkID);
    }
}
